# 使用物体边缘检测中的输入数据X和输出数据Y来学习我们构造的核数组K。
# 我们首先构造一个卷积层，将其卷积核初始化成随机数组。接下来在每一
# 次迭代中，我们使用平方误差来比较Y和卷积层的输出，然后计算梯度来更
# 新权重。简单起见，这里的卷积层忽略了偏差。

from mxnet import autograd, nd
from mxnet.gluon import nn
from object_detection import *

# 构造一个输出通道数为1（将在“多输入通道和多输出通道”一节介绍通道），核数组形状是(1, 2)的二
# 维卷积层
conv2d = nn.Conv2D(1, kernel_size=(1, 2))
conv2d.initialize()

# 二维卷积层使用4维输入输出，格式为(样本, 通道, 高, 宽)，这里批量大小（批量中的样本数）和通
# 道数均为1
X = X.reshape((1, 1, 6, 8))
Y = Y.reshape((1, 1, 6, 7))

for i in range(10):
    with autograd.record():
        Y_hat = conv2d(X)
        l = (Y_hat - Y) ** 2
    l.backward()

    # 简单起见，这里忽略了偏差
    conv2d.weight.data()[:] -= 3e-2 * conv2d.weight.grad()

    if (i + 1) % 2 == 0:
        print('batch %d, loss %.3f' % (i + 1, l.sum().asscalar()))

# 可以看到，10次迭代后误差已经降到了一个比较小的值。现在来看一下学习到的核数组。

k = conv2d.weight.data().reshape((1, 2))

print(k)

# 可以看到，学到的核数组与我们之前定义的核数组K较接近。

# 那么，你也许会好奇卷积层为何能使用互相关运算替代卷积运
# 算。其实，在深度学习中核数组都是学出来的：卷积层无论使
# 用互相关运算或卷积运算都不影响模型预测时的输出。

# 二维卷积层输出的二维数组可以看作是输入在空间维度（宽和高）
# 上某一级的表征，也叫特征图（feature map）。影响元素 x 的前
# 向计算的所有可能输入区域（可能大于输入的实际尺寸）叫做 x 的
# 感受野（receptive field）。

# 将 Y 与另一个形状为 2×2 的核数组做互相关运算，输出单个元素z。
# 那么， z 在 Y 上的感受野包括 Y 的全部四个元素，在输入上的感受
# 野包括其中全部9个元素。可见，我们可以通过更深的卷积神经网络使
# 特征图中单个元素的感受野变得更加广阔，从而捕捉输入上更大尺寸
# 的特征。